import Head from 'next/head'
import axios from 'axios'
import { RequestData } from '../types/request'
import { FormInput } from '../types/formInput'
import {
  Input,
  InputGroup,
  FormControl,
  Button,
  IconButton,
  Flex,
  FormErrorMessage,
  VStack,
  Text,
  CloseButton,
} from '@chakra-ui/react'
import { AddIcon } from '@chakra-ui/icons'
import { useFieldArray, useForm } from 'react-hook-form'
import { convertUnfamiliarWords } from '../utils/convertUnfamiliarWords'
import { MESSAGES } from '../constants/messages'

const defineDefaultUnfamiliarWord = () => ({
  value: '',
})

const defaultValues = {
  unfamiliarWords: [
    defineDefaultUnfamiliarWord(),
    defineDefaultUnfamiliarWord(),
  ],
  metaphor: 'aaa',
}

export default function Home() {
  const {
    register,
    handleSubmit,
    control,
    formState: { errors, isSubmitting },
  } = useForm<FormInput>({
    defaultValues,
    mode: 'onChange',
  })
  const { fields, append, remove } = useFieldArray({
    name: 'unfamiliarWords',
    control,
  })

  const hasError = (index: number): boolean =>
    Boolean(
      errors.unfamiliarWords && errors.unfamiliarWords[index]?.value?.message,
    )

  const generateAI = async (inputs: FormInput) => {
    const text = convertUnfamiliarWords(inputs)
    const data: RequestData = {
      text,
    }
    const response = await axios.post('/api/ai', data)
    console.log(response)
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <VStack>
          <form onSubmit={handleSubmit(generateAI)}>
            {fields.map((field, index) => (
              <FormControl key={field.id} isInvalid={hasError(index)}>
                <InputGroup my="4" mx="auto">
                  <Input
                    size="lg"
                    {...register(`unfamiliarWords.${index}.value` as const, {
                      maxLength: {
                        value: 15,
                        message: MESSAGES.validate.maxLength(15),
                      },
                    })}
                  />

                  <CloseButton
                    variant="ghost"
                    my="auto"
                    aria-label="Remove unfamiliarWord"
                    onClick={() => remove(index)}
                    isDisabled={fields.length <= 2}
                  />
                </InputGroup>

                <FormErrorMessage>
                  {errors.unfamiliarWords &&
                    errors.unfamiliarWords[index]?.value?.message}
                </FormErrorMessage>
              </FormControl>
            ))}

            <Flex justify="center" my="4">
              <IconButton
                aria-label="Add to unfamiliarWords"
                icon={<AddIcon />}
                variant="outline"
                onClick={() => append(defineDefaultUnfamiliarWord())}
                isDisabled={fields.length >= 5}
              />
            </Flex>

            <Text mb="2" fontSize="2xl" align="center">
              の違いを
            </Text>

            <Input
              size="lg"
              {...register('metaphor' as const, {
                maxLength: {
                  value: 15,
                  message: MESSAGES.validate.maxLength(15),
                },
              })}
            />

            <Flex justify="center" my="4">
              <Button colorScheme="blue" type="submit" isLoading={isSubmitting}>
                で例えて！
              </Button>
            </Flex>
          </form>
        </VStack>
      </main>
    </>
  )
}

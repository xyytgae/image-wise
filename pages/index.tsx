import Head from 'next/head'
import axios from 'axios'
import { RequestData } from '../types/request'
import { FormInput } from '../types/formInput'
import {
  Input,
  InputGroup,
  FormControl,
  Button,
  IconButton,
  FormErrorMessage,
  Text,
  CloseButton,
  Box,
  Stack,
  Container,
} from '@chakra-ui/react'
import { AddIcon } from '@chakra-ui/icons'
import { useFieldArray, useForm } from 'react-hook-form'
import { convertUnfamiliarWords } from '../utils/convertUnfamiliarWords'
import { MESSAGES } from '../constants/messages'
import { useState } from 'react'

const defineDefaultUnfamiliarWord = () => ({
  value: '',
})

const defaultValues = {
  unfamiliarWords: [
    defineDefaultUnfamiliarWord(),
    defineDefaultUnfamiliarWord(),
  ],
  metaphor: '',
}

export default function Home() {
  const {
    register,
    handleSubmit,
    control,
    formState: { errors, isSubmitting },
  } = useForm<FormInput>({
    defaultValues,
    mode: 'onChange',
  })
  const { fields, append, remove } = useFieldArray({
    name: 'unfamiliarWords',
    control,
  })

  const [result, setResult] = useState<string>('')

  const hasError = (index: number): boolean =>
    Boolean(
      errors.unfamiliarWords && errors.unfamiliarWords[index]?.value?.message,
    )

  const generateAI = async (inputs: FormInput) => {
    const text = convertUnfamiliarWords(inputs)
    const data: RequestData = {
      text,
    }
    const response = await axios.post('/api/ai', data)
    setResult(response.data.result)
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container width={['100%', '75%']}>
          <Stack>
            <Box mb="8">
              <Stack>
                <form onSubmit={handleSubmit(generateAI)}>
                  <Stack spacing="8">
                    <Stack>
                      {fields.map((field, index) => (
                        <FormControl key={field.id} isInvalid={hasError(index)}>
                          <InputGroup my="4">
                            <Input
                              size="lg"
                              {...register(
                                `unfamiliarWords.${index}.value` as const,
                                {
                                  maxLength: {
                                    value: 15,
                                    message: MESSAGES.validate.maxLength(15),
                                  },
                                },
                              )}
                            />

                            <CloseButton
                              variant="ghost"
                              my="auto"
                              aria-label="Remove unfamiliarWord"
                              onClick={() => remove(index)}
                              isDisabled={fields.length <= 2}
                            />
                          </InputGroup>

                          <FormErrorMessage>
                            {errors.unfamiliarWords &&
                              errors.unfamiliarWords[index]?.value?.message}
                          </FormErrorMessage>
                        </FormControl>
                      ))}
                    </Stack>

                    <Stack>
                      <IconButton
                        aria-label="Add to unfamiliarWords"
                        icon={<AddIcon />}
                        variant="outline"
                        fontSize="20px"
                        onClick={() => append(defineDefaultUnfamiliarWord())}
                        isDisabled={fields.length >= 5}
                      />
                    </Stack>
                  </Stack>

                  <Stack>
                    <Text mb="2" fontSize="2xl" align="center" my="4">
                      の違いを
                    </Text>
                  </Stack>
                  <Stack spacing="8">
                    <Input
                      size="lg"
                      {...register('metaphor' as const, {
                        maxLength: {
                          value: 15,
                          message: MESSAGES.validate.maxLength(15),
                        },
                      })}
                    />

                    <Button
                      colorScheme="blue"
                      type="submit"
                      isLoading={isSubmitting}
                    >
                      で例えて
                    </Button>
                  </Stack>
                </form>
              </Stack>
            </Box>

            {result && (
              <Box p="4" border="4px" borderColor="gray.200" borderRadius="md">
                <Text mb="2" fontWeight="bold">
                  Result:
                </Text>
                <Text>{result}</Text>
              </Box>
            )}
          </Stack>
        </Container>
      </main>
    </>
  )
}
